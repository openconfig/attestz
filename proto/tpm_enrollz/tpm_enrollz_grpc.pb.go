// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: github.com/openconfig/attestz/proto/tpm_enrollz.proto

package attestz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TpmEnrollzService_GetIakCert_FullMethodName     = "/openconfig.attestz.TpmEnrollzService/GetIakCert"
	TpmEnrollzService_RotateOIakCert_FullMethodName = "/openconfig.attestz.TpmEnrollzService/RotateOIakCert"
	TpmEnrollzService_RotateAIKCert_FullMethodName  = "/openconfig.attestz.TpmEnrollzService/RotateAIKCert"
)

// TpmEnrollzServiceClient is the client API for TpmEnrollzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TpmEnrollzServiceClient interface {
	GetIakCert(ctx context.Context, in *GetIakCertRequest, opts ...grpc.CallOption) (*GetIakCertResponse, error)
	RotateOIakCert(ctx context.Context, in *RotateOIakCertRequest, opts ...grpc.CallOption) (*RotateOIakCertResponse, error)
	RotateAIKCert(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RotateAIKCertRequest, RotateAIKCertResponse], error)
}

type tpmEnrollzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTpmEnrollzServiceClient(cc grpc.ClientConnInterface) TpmEnrollzServiceClient {
	return &tpmEnrollzServiceClient{cc}
}

func (c *tpmEnrollzServiceClient) GetIakCert(ctx context.Context, in *GetIakCertRequest, opts ...grpc.CallOption) (*GetIakCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIakCertResponse)
	err := c.cc.Invoke(ctx, TpmEnrollzService_GetIakCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmEnrollzServiceClient) RotateOIakCert(ctx context.Context, in *RotateOIakCertRequest, opts ...grpc.CallOption) (*RotateOIakCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateOIakCertResponse)
	err := c.cc.Invoke(ctx, TpmEnrollzService_RotateOIakCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmEnrollzServiceClient) RotateAIKCert(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RotateAIKCertRequest, RotateAIKCertResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TpmEnrollzService_ServiceDesc.Streams[0], TpmEnrollzService_RotateAIKCert_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RotateAIKCertRequest, RotateAIKCertResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TpmEnrollzService_RotateAIKCertClient = grpc.BidiStreamingClient[RotateAIKCertRequest, RotateAIKCertResponse]

// TpmEnrollzServiceServer is the server API for TpmEnrollzService service.
// All implementations should embed UnimplementedTpmEnrollzServiceServer
// for forward compatibility.
type TpmEnrollzServiceServer interface {
	GetIakCert(context.Context, *GetIakCertRequest) (*GetIakCertResponse, error)
	RotateOIakCert(context.Context, *RotateOIakCertRequest) (*RotateOIakCertResponse, error)
	RotateAIKCert(grpc.BidiStreamingServer[RotateAIKCertRequest, RotateAIKCertResponse]) error
}

// UnimplementedTpmEnrollzServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTpmEnrollzServiceServer struct{}

func (UnimplementedTpmEnrollzServiceServer) GetIakCert(context.Context, *GetIakCertRequest) (*GetIakCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIakCert not implemented")
}
func (UnimplementedTpmEnrollzServiceServer) RotateOIakCert(context.Context, *RotateOIakCertRequest) (*RotateOIakCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateOIakCert not implemented")
}
func (UnimplementedTpmEnrollzServiceServer) RotateAIKCert(grpc.BidiStreamingServer[RotateAIKCertRequest, RotateAIKCertResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RotateAIKCert not implemented")
}
func (UnimplementedTpmEnrollzServiceServer) testEmbeddedByValue() {}

// UnsafeTpmEnrollzServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TpmEnrollzServiceServer will
// result in compilation errors.
type UnsafeTpmEnrollzServiceServer interface {
	mustEmbedUnimplementedTpmEnrollzServiceServer()
}

func RegisterTpmEnrollzServiceServer(s grpc.ServiceRegistrar, srv TpmEnrollzServiceServer) {
	// If the following call pancis, it indicates UnimplementedTpmEnrollzServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TpmEnrollzService_ServiceDesc, srv)
}

func _TpmEnrollzService_GetIakCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIakCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmEnrollzServiceServer).GetIakCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TpmEnrollzService_GetIakCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmEnrollzServiceServer).GetIakCert(ctx, req.(*GetIakCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TpmEnrollzService_RotateOIakCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateOIakCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmEnrollzServiceServer).RotateOIakCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TpmEnrollzService_RotateOIakCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmEnrollzServiceServer).RotateOIakCert(ctx, req.(*RotateOIakCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TpmEnrollzService_RotateAIKCert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TpmEnrollzServiceServer).RotateAIKCert(&grpc.GenericServerStream[RotateAIKCertRequest, RotateAIKCertResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TpmEnrollzService_RotateAIKCertServer = grpc.BidiStreamingServer[RotateAIKCertRequest, RotateAIKCertResponse]

// TpmEnrollzService_ServiceDesc is the grpc.ServiceDesc for TpmEnrollzService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TpmEnrollzService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openconfig.attestz.TpmEnrollzService",
	HandlerType: (*TpmEnrollzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIakCert",
			Handler:    _TpmEnrollzService_GetIakCert_Handler,
		},
		{
			MethodName: "RotateOIakCert",
			Handler:    _TpmEnrollzService_RotateOIakCert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RotateAIKCert",
			Handler:       _TpmEnrollzService_RotateAIKCert_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/attestz/proto/tpm_enrollz.proto",
}
