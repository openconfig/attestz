//
// Copyright 2023 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" B1IS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto3";

package openconfig.attestz;

import "github.com/openconfig/attestz/proto/common_definitions.proto";

option go_package = "github.com/openconfig/attestz";

// Request for a given control card to return its Initial Attestation Key (IAK)
// certificate signed by the network device vendor CA.
message GetIakCertRequest {
  // Switch control card selected identifier.
  ControlCardSelection control_card_selection = 1;

}

// Response from the specified control card containing its Initial Attestation
// Key (IAK) certificate signed by network device vendor CA.
message GetIakCertResponse {
  // Vendor identity fields of the selected control card.
  ControlCardVendorId control_card_id = 1;

  // PEM-encoded initial attestation key certificate signed by the network
  // device vendor CA.
  string iak_cert = 2;

  // [Optional] PEM-encoded initial DevID certificate signed by the network
  // device vendor CA. This field should always be populated on the primary
  // control card. It should only be populated for standby/secondary control
  // card when no direct communication to that control card is possible.
  string idevid_cert = 3;

}

// Request for a given control card to rotate/install an owner Initial
// Attestation Key (oIAK) certificate signed by the network device
// owner/administrator CA.
message RotateOIakCertRequest {
  // Switch control card selected identifier.
  ControlCardSelection control_card_selection = 1;

  // PEM-encoded owner initial attestation key certificate signed by the
  // network device owner/administrator CA. The PEM formatted cert string
  // can have // more than one certificate block representing a certificate
  // chain.
  string oiak_cert = 2;

  // [Optional] PEM-encoded owner initial DevID certificate signed by the
  // network device owner/administrator CA. The PEM formatted cert string
  // can have more than one certificate block representing a certificate chain.
  //
  // Will be unassigned in these workflows:
  // 1. During oIak Installation, if `idevid_cert` was not
  // provided in GetIakCertResponse.
  // 2. During oIak Rotation.
  string oidevid_cert = 3;

  // SSL profile for which the certs will be assigned.
  // (Optional: Only required if rotating oidevid_cert.)
  string ssl_profile_id = 4;
  
}

// Response from the specified control card to rotate/install an owner Initial
// Attestation Key (oIAK) certificate signed by the network device
// owner/administrator CA.
message RotateOIakCertResponse {
  // Leave empty for now to allow the addition of new fields without major
  // changes.
}

// The RotateAIKCertRequest handles the workflow for enrollment of TPM1.2
// devices. The initial request will include the issuer_public_key to allow
// the building of the AIK which will then be returned and used to generate
// the AIK cert. For any updates after initial enrollment the new AIK cert
// can just be returned.
message RotateAIKCertRequest {
  message IssuerCertPayload {
    // Symmetric key used to encrypt the AIK Cert blob.
    // This blob is encrypted with the EK.
    bytes symmetric_key_blob = 1;
    // AIK Cert in PEM format that is encrypted with the provided symmetric
    // key.
    bytes aik_cert_blob = 2;
  }

  oneof value {
    bytes issuer_public_key = 1;
    // Encrypted payload that only the targeted device should be able
    // to decrypt via the EK.
    IssuerCertPayload issuer_cert_payload = 2;
    // Finalize tells the server that the AIK cert is correct.
    bool finalize = 3;
  }

  // Switch control card selected identifier.
  ControlCardSelection control_card_selection = 4;
}

message RotateAIKCertResponse {
  oneof value {
    bytes application_identity_request = 1;
    // The decrypted cert in PEM format is returned so the caller can validate
    // that the device did in fact have the proper EK.
    string aik_cert = 2;
  }
  
  // Vendor identity fields of the selected control card.
  ControlCardVendorId control_card_id = 3;
}

// The service is responsible for TPM enrollment workflow on the network device
// owner/administrator side. In this workflow the network device owner verifies
// a device's Initial Attestation Key (IAK) and Initial DevID (IDevID)
// certificates (signed by the network device vendor CA) and installs or rotates
// owner IAK (oIAK) and owner IDevID (oIDevID) certificates (signed by the
// network device owner CA). oIAK and oIDevID certs are based on the same
// underlying keys as IAK and IDevID certs respectively and give network device
// owner the ability to:
//   (1) Fully control certificate structure, revocation and expiration policies
//   (2) Remove external dependencies upon the network device vendor CA during
//       TPM attestation workflow.
//
// The assumption is that before the device is shipped to the network device
// owner, a network device vendor provisions each control card with an IAK and
// IDevID certificates following the TCG specification in Section 5.2 and
// Section 6.2:
// protolint:disable MAX_LINE_LENGTH
// https://trustedcomputinggroup.org/wp-content/uploads/TPM-2p0-Keys-for-Device-Identity-and-Attestation_v1_r12_pub10082021.pdf#page=20
// Please consult the README.md for more details on the workflow.
service TpmEnrollzService {
  // From a given control card fetch Initial Attestation Key (IAK) certificate
  // signed by the network device vendor CA.
  rpc GetIakCert(GetIakCertRequest) returns (GetIakCertResponse);

  // For a given control card rotate owner Initial Attestation Key (oIAK)
  // certificate signed by the network device owner/administrator CA. If no
  // oIAK cert is present on the device, then a new one is persisted.
  // Otherwise, a new oIAK cert should overwrite an existing oIAK cert on the
  // device.
  rpc RotateOIakCert(RotateOIakCertRequest) returns (RotateOIakCertResponse);

  // For TPM1.2 systems the following RPC's are used to enroll the device.
  // RotateAIKCert takes the public key of the issuer and uses it as input to
  // generate the AIK. The AIK is then returned to the caller for use in AIK
  // cert generation then returned to the device for storage and finalization.
  // Workflow overview:
  // Client -> Sends request with issuer_public_key
  // Device -> Takes issuer_public_key and builds an application_identity_request
  // Client -> Takes application_identity_request and gets AIK cert from CA and encrypts it and
  //           returns it in issuer_cert_payload
  // Device -> Unencrypts and installs the new AIK cert and returns the PEM format back to
  //           caller for verification in aik_cert
  // Client -> Validate the AIK Cert is as expected and returns a finalize message and closes
  //           the RPC.
  rpc RotateAIKCert(stream RotateAIKCertRequest) returns (stream RotateAIKCertResponse);

}
