// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: github.com/openconfig/attestz/proto/common_definitions.proto

package attestz

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ControlCardRole int32

const (
	ControlCardRole_CONTROL_CARD_ROLE_UNSPECIFIED ControlCardRole = 0
	ControlCardRole_CONTROL_CARD_ROLE_ACTIVE      ControlCardRole = 1
	ControlCardRole_CONTROL_CARD_ROLE_STANDBY     ControlCardRole = 2
)

// Enum value maps for ControlCardRole.
var (
	ControlCardRole_name = map[int32]string{
		0: "CONTROL_CARD_ROLE_UNSPECIFIED",
		1: "CONTROL_CARD_ROLE_ACTIVE",
		2: "CONTROL_CARD_ROLE_STANDBY",
	}
	ControlCardRole_value = map[string]int32{
		"CONTROL_CARD_ROLE_UNSPECIFIED": 0,
		"CONTROL_CARD_ROLE_ACTIVE":      1,
		"CONTROL_CARD_ROLE_STANDBY":     2,
	}
)

func (x ControlCardRole) Enum() *ControlCardRole {
	p := new(ControlCardRole)
	*p = x
	return p
}

func (x ControlCardRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlCardRole) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_attestz_proto_common_definitions_proto_enumTypes[0].Descriptor()
}

func (ControlCardRole) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_attestz_proto_common_definitions_proto_enumTypes[0]
}

func (x ControlCardRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlCardRole.Descriptor instead.
func (ControlCardRole) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescGZIP(), []int{0}
}

type ControlCardVendorId struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ControlCardRole     ControlCardRole        `protobuf:"varint,1,opt,name=control_card_role,json=controlCardRole,proto3,enum=openconfig.attestz.ControlCardRole" json:"control_card_role,omitempty"`
	ControlCardSerial   string                 `protobuf:"bytes,2,opt,name=control_card_serial,json=controlCardSerial,proto3" json:"control_card_serial,omitempty"`
	ControlCardSlot     string                 `protobuf:"bytes,3,opt,name=control_card_slot,json=controlCardSlot,proto3" json:"control_card_slot,omitempty"`
	ChassisManufacturer string                 `protobuf:"bytes,4,opt,name=chassis_manufacturer,json=chassisManufacturer,proto3" json:"chassis_manufacturer,omitempty"`
	ChassisPartNumber   string                 `protobuf:"bytes,5,opt,name=chassis_part_number,json=chassisPartNumber,proto3" json:"chassis_part_number,omitempty"`
	ChassisSerialNumber string                 `protobuf:"bytes,6,opt,name=chassis_serial_number,json=chassisSerialNumber,proto3" json:"chassis_serial_number,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ControlCardVendorId) Reset() {
	*x = ControlCardVendorId{}
	mi := &file_github_com_openconfig_attestz_proto_common_definitions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlCardVendorId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCardVendorId) ProtoMessage() {}

func (x *ControlCardVendorId) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_common_definitions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCardVendorId.ProtoReflect.Descriptor instead.
func (*ControlCardVendorId) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescGZIP(), []int{0}
}

func (x *ControlCardVendorId) GetControlCardRole() ControlCardRole {
	if x != nil {
		return x.ControlCardRole
	}
	return ControlCardRole_CONTROL_CARD_ROLE_UNSPECIFIED
}

func (x *ControlCardVendorId) GetControlCardSerial() string {
	if x != nil {
		return x.ControlCardSerial
	}
	return ""
}

func (x *ControlCardVendorId) GetControlCardSlot() string {
	if x != nil {
		return x.ControlCardSlot
	}
	return ""
}

func (x *ControlCardVendorId) GetChassisManufacturer() string {
	if x != nil {
		return x.ChassisManufacturer
	}
	return ""
}

func (x *ControlCardVendorId) GetChassisPartNumber() string {
	if x != nil {
		return x.ChassisPartNumber
	}
	return ""
}

func (x *ControlCardVendorId) GetChassisSerialNumber() string {
	if x != nil {
		return x.ChassisSerialNumber
	}
	return ""
}

type ControlCardSelection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ControlCardId:
	//
	//	*ControlCardSelection_Role
	//	*ControlCardSelection_Serial
	//	*ControlCardSelection_Slot
	ControlCardId isControlCardSelection_ControlCardId `protobuf_oneof:"control_card_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlCardSelection) Reset() {
	*x = ControlCardSelection{}
	mi := &file_github_com_openconfig_attestz_proto_common_definitions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlCardSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCardSelection) ProtoMessage() {}

func (x *ControlCardSelection) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_common_definitions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCardSelection.ProtoReflect.Descriptor instead.
func (*ControlCardSelection) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescGZIP(), []int{1}
}

func (x *ControlCardSelection) GetControlCardId() isControlCardSelection_ControlCardId {
	if x != nil {
		return x.ControlCardId
	}
	return nil
}

func (x *ControlCardSelection) GetRole() ControlCardRole {
	if x != nil {
		if x, ok := x.ControlCardId.(*ControlCardSelection_Role); ok {
			return x.Role
		}
	}
	return ControlCardRole_CONTROL_CARD_ROLE_UNSPECIFIED
}

func (x *ControlCardSelection) GetSerial() string {
	if x != nil {
		if x, ok := x.ControlCardId.(*ControlCardSelection_Serial); ok {
			return x.Serial
		}
	}
	return ""
}

func (x *ControlCardSelection) GetSlot() string {
	if x != nil {
		if x, ok := x.ControlCardId.(*ControlCardSelection_Slot); ok {
			return x.Slot
		}
	}
	return ""
}

type isControlCardSelection_ControlCardId interface {
	isControlCardSelection_ControlCardId()
}

type ControlCardSelection_Role struct {
	Role ControlCardRole `protobuf:"varint,1,opt,name=role,proto3,enum=openconfig.attestz.ControlCardRole,oneof"`
}

type ControlCardSelection_Serial struct {
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3,oneof"`
}

type ControlCardSelection_Slot struct {
	Slot string `protobuf:"bytes,3,opt,name=slot,proto3,oneof"`
}

func (*ControlCardSelection_Role) isControlCardSelection_ControlCardId() {}

func (*ControlCardSelection_Serial) isControlCardSelection_ControlCardId() {}

func (*ControlCardSelection_Slot) isControlCardSelection_ControlCardId() {}

var File_github_com_openconfig_attestz_proto_common_definitions_proto protoreflect.FileDescriptor

var file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x7a, 0x22, 0xd9, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x94,
	0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x2a, 0x71, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x02, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescOnce sync.Once
	file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescData = file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDesc
)

func file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescGZIP() []byte {
	file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescOnce.Do(func() {
		file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescData)
	})
	return file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDescData
}

var file_github_com_openconfig_attestz_proto_common_definitions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_openconfig_attestz_proto_common_definitions_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_openconfig_attestz_proto_common_definitions_proto_goTypes = []any{
	(ControlCardRole)(0),         // 0: openconfig.attestz.ControlCardRole
	(*ControlCardVendorId)(nil),  // 1: openconfig.attestz.ControlCardVendorId
	(*ControlCardSelection)(nil), // 2: openconfig.attestz.ControlCardSelection
}
var file_github_com_openconfig_attestz_proto_common_definitions_proto_depIdxs = []int32{
	0, // 0: openconfig.attestz.ControlCardVendorId.control_card_role:type_name -> openconfig.attestz.ControlCardRole
	0, // 1: openconfig.attestz.ControlCardSelection.role:type_name -> openconfig.attestz.ControlCardRole
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_github_com_openconfig_attestz_proto_common_definitions_proto_init() }
func file_github_com_openconfig_attestz_proto_common_definitions_proto_init() {
	if File_github_com_openconfig_attestz_proto_common_definitions_proto != nil {
		return
	}
	file_github_com_openconfig_attestz_proto_common_definitions_proto_msgTypes[1].OneofWrappers = []any{
		(*ControlCardSelection_Role)(nil),
		(*ControlCardSelection_Serial)(nil),
		(*ControlCardSelection_Slot)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_openconfig_attestz_proto_common_definitions_proto_goTypes,
		DependencyIndexes: file_github_com_openconfig_attestz_proto_common_definitions_proto_depIdxs,
		EnumInfos:         file_github_com_openconfig_attestz_proto_common_definitions_proto_enumTypes,
		MessageInfos:      file_github_com_openconfig_attestz_proto_common_definitions_proto_msgTypes,
	}.Build()
	File_github_com_openconfig_attestz_proto_common_definitions_proto = out.File
	file_github_com_openconfig_attestz_proto_common_definitions_proto_rawDesc = nil
	file_github_com_openconfig_attestz_proto_common_definitions_proto_goTypes = nil
	file_github_com_openconfig_attestz_proto_common_definitions_proto_depIdxs = nil
}
